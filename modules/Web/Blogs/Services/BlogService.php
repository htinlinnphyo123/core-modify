<?php

namespace BasicDashboard\Web\Blogs\Services;

use BasicDashboard\Foundations\Domain\Blogs\Repositories\BlogRepositoryInterface;
use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Web\Blogs\Resources\BlogResource;
use Illuminate\Http\RedirectResponse;
use Illuminate\Routing\ResponseFactory;
use Illuminate\View\View;
use Exception;

/**
 *
 * A BlogService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class BlogService extends BaseController
{
    const VIEW = 'admin.blog';
    const ROUTE = 'blogs';
    const LANG_PATH = "blog.blog";

    public function __construct(
        private BlogRepositoryInterface $blogRepositoryInterface,
        private ResponseFactory $responseFactory
    )
    {
    }

    public function index(array $request): View
    {
        $blogList = $this->blogRepositoryInterface->getBlogList($request);
        $blogList = BlogResource::collection($blogList)->response()->getData(true);
        return $this->responseFactory->successView(self::VIEW.".index", $blogList);
    }

    public function create(): View
    {
        return view(self::VIEW.'.create');
    }

    public function store($request): RedirectResponse
    {
        try {
            $this->blogRepositoryInterface->beginTransaction();
            $this->blogRepositoryInterface->insert($request);
            $this->blogRepositoryInterface->commit();
            return $this->responseFactory->successIndexRedirect(self::ROUTE, __(self::LANG_PATH . '_created'));
        } catch (Exception $e) {
            return $this->responseFactory->redirectBackWithError($this->blogRepositoryInterface, $e->getMessage());
        }
    }

    public function edit(string $id): View | RedirectResponse
    {
        $blog = $this->blogRepositoryInterface->edit($id);
        $blog = new BlogResource($blog);
        $blog = $blog->response()->getData(true)['data'];
        return $this->responseFactory->successView(self::VIEW . ".edit", $blog);
    }

    public function show(string $id): View | RedirectResponse
    {
        $blog = $this->blogRepositoryInterface->show($id);
        $blog = new BlogResource($blog);
        $blog = $blog->response()->getData(true)['data'];
        return $this->responseFactory->successView(self::VIEW . '.show', $blog);
    }

    public function update($request, string $id): RedirectResponse
    {
         try {
            $this->blogRepositoryInterface->beginTransaction();
            $this->blogRepositoryInterface->update($request, $id);
            $this->blogRepositoryInterface->commit();
            return $this->responseFactory->successShowRedirect(self::ROUTE, $id, __(self::LANG_PATH . '_updated'));
        } catch (Exception $e) {
            return $this->responseFactory->redirectBackWithError($this->blogRepositoryInterface, $e->getMessage());
        }
    }

    public function destroy($request): RedirectResponse
    {
         try {
            $this->blogRepositoryInterface->beginTransaction();
            $this->blogRepositoryInterface->delete($request['id']);
            $this->blogRepositoryInterface->commit();
            return $this->responseFactory->successIndexRedirect(self::ROUTE, __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->responseFactory->redirectBackWithError($this->blogRepositoryInterface, $e->getMessage());
        }
    }

}
