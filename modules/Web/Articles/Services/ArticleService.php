<?php

namespace BasicDashboard\Web\Articles\Services;

use BasicDashboard\Foundations\Domain\Articles\Repositories\ArticleRepositoryInterface;
use BasicDashboard\Web\Articles\Resources\ArticleResource;
use BasicDashboard\Web\Articles\Resources\EditArticleResource;
use BasicDashboard\Web\Common\BaseController;
use Exception;
use function Illuminate\Support\defer;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;
use Ladumor\OneSignal\OneSignal;

/**
 *
 * A ArticleService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class ArticleService extends BaseController
{
    const VIEW = 'admin.article';
    const ROUTE = 'articles';
    const LANG_PATH = "article.article";

    public function __construct(
        private ArticleRepositoryInterface $articleRepository,
    ) {}

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(array $request): View
    {
        $articleList = $this->articleRepository->getArticleList($request);
        $articleList = ArticleResource::collection($articleList)->response()->getData(true);
        return $this->returnView(self::VIEW . ".index", $articleList);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        return view(self::VIEW . '.create');
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store($request)
    {
        try {
            //get link count to generate presigned url
            if (isset($request['link_count'])) {
                $link_count = $request['link_count'];
                unset($request['link_count']);
            }

            $this->articleRepository->beginTransaction();

            $model = $this->articleRepository->insert($request);

            //FOR LINK FIELD (MEDIA image,pdf,video,audio)
            $path = "articles" . '/' . $model['id'];
            $generatedUrl = $this->generatePresignedUrl($link_count, $path);
            $paths = array_column($generatedUrl, 'path'); // to store in db
            $urls = array_column($generatedUrl, 'url'); //to return to frontend

            //thumbnail store
            $thumbnailPath = isset($request['thumbnail']) ? uploadImageToDigitalOcean($request['thumbnail'], $path) : null;
            $model->update([
                'link' => $paths,
                'thumbnail' => $thumbnailPath,
            ]);
            $this->articleRepository->commit();

            return response()->json([
                'message' => __(self::LANG_PATH . '_created'),
                'responseType' => 'success',
                'status' => 200,
                'data' => $urls,
                'id' => customEncoder($model['id']),
            ]);
        } catch (Exception $e) {
            return $this->sendAjaxError($e->getMessage());
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        $article = $this->articleRepository->edit($id);
        $article = new EditArticleResource($article);
        $article = $article->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . ".edit", $article);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        $article = $this->articleRepository->show($id);
        $article = new ArticleResource($article);
        $article = $article->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . '.show', $article);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update($request, string $id): JsonResponse
    {
        try {
            //get link count to generate presigned url
            $link_count = $request['link_count'];
            // \Log::info($link_count);
            unset($request['link_count']);
            //deleted media if user delete from client side
            $deletedMediaArray = json_decode($request['deleteArray']);
            if (count($deletedMediaArray) > 0) {
                // rsort($deletedMedia);
                $getModel = $this->articleRepository->show($id)->toArray();
                $orgMediaArray = $getModel['link'];
                $filteredArray = [];
                // \Log::info($orgMediaArray,$deletedMediaArray);
                foreach ($orgMediaArray as $index => $element) {
                    if (!in_array($index, $deletedMediaArray)) {
                        $filteredArray[] = $element;
                    } else {
                        //will be remove in digitalocean if the item is deleted
                        $this->deleteImage($element);
                    }
                }
                $request['link'] = $filteredArray;
            }
            unset($request['deleteArray']);

            $this->articleRepository->beginTransaction();
            $this->articleRepository->update($request, $id);

            //for new model
            $model = $this->articleRepository->show($id);
            $path = "articles" . '/' . $model['id'];
            $generatedArray = $this->generatePresignedUrl($link_count, $path);
            $generatedPaths = array_column($generatedArray, 'path'); // that return from presignedURL
            $orgMediaArray = $model['link']; //original array that store in DB
            //UPDATE Thumbnail and Media(link) if new files are added
            $newPaths = count($generatedPaths) > 0 ? array_merge($orgMediaArray, $generatedPaths) : $orgMediaArray;
            $thumbnailPath = isset($request['thumbnail']) ? uploadImageToDigitalOcean($request['thumbnail'], $path) : $model['thumbnail'];

            $generatedUrls = array_column($generatedArray, 'url'); //to return to frontend
            $model->update([
                'link' => $newPaths,
                'thumbnail' => $thumbnailPath,
            ]);

            $this->articleRepository->commit();
            return response()->json([
                'message' => __(self::LANG_PATH . '_created'),
                'responseType' => 'success',
                'status' => 200,
                'data' => $generatedUrls,
                'id' => customEncoder($model['id']),
            ]);
        } catch (Exception $e) {
            return $this->sendAjaxError($e->getMessage());
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy($request): RedirectResponse
    {
        try {
            $this->articleRepository->beginTransaction();
            $this->articleRepository->delete($request['id']);
            $this->articleRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->articleRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function sendArticleNotification($request, $id)
    {
        $request->validate([
            'country' => 'required',
        ], [
            'country.required' => "Please Select Country",
        ]);
        $country = $request->input('country');
        $article = $this->articleRepository->show($id);
        $article = new ArticleResource($article);
        $article = $article->response()->getData(true)['data'];

        $imageUrl = $article['thumbnail'];

        $fields = [
            'included_segments' => [$country],
            'chrome_web_image' => $imageUrl, //Chrome web push. Windows and Android only.
            'chrome_web_icon' => $imageUrl, //Chrome web push
            'chrome_big_picture' => $imageUrl, //Chrome Apps
            'chrome_web_badge' => $imageUrl, //Chrome web push. Android only.
            'chrome_icon' => $imageUrl, //Chrome app
            'firefox_icon' => $imageUrl, //Firefox web push
            'huawei_big_picture' => $imageUrl, //Huawei
            'huawei_small_icon' => $imageUrl, //Huawei
            'huawei_large_icon' => $imageUrl, //Huawei
            'adm_big_picture' => $imageUrl, //Amazon
            'adm_small_icon' => $imageUrl, //Amazon
            'adm_large_icon' => $imageUrl, //Huawei
            'big_picture' => $imageUrl, //Android
            'small_icon' => $imageUrl, //Android
            'large_icon' => $imageUrl, //Android
            'data' => [
                'article_id' => $article['id'],
            ],
        ];
        defer(function () use ($fields, $article) {
            OneSignal::sendPush($fields, "**" . $article['title']);
        });
        return $this->sendAjaxSuccess("Article was successfully Send!");
    }
}
